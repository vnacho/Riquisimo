@using Ferpuser.Models.Core
@model CompraPedido

@{
    Fichero fichero = new Fichero()
    {
        CampoNombre = "FicheroNombre",
        CampoUrl = "FicheroUrl",
        Url = Model?.FicheroUrl,
        Nombre = Model?.FicheroNombre
    };
}


@Html.HiddenFor(f => f.Id)

@if (Model == null || (Model.Id > 0 && Model.EstadoPedido == EstadoPedido.Pendiente))
{
<div class="card mb-4 wow d-print-none">    
    <div class="form-row card-body">
        <div class="form-group col-md-12">
            @Html.DisplayFor(f => f.EstadoPedido)
        </div>
        <div class="form-group col-md-2">
            @Html.LabelFor(f => f.CodigoPedido, new { @class = "small" })
            @Html.HiddenFor(model => model.CodigoPedido)
            <input type="text" class="form-control form-control-sm" value="@Model.CodigoPedido" disabled />
            @Html.ValidationMessageFor(f => f.CodigoPedido, "", new { @class = "text-danger small" })
        </div>        

        <div class="form-group col-md-2">
            @Html.LabelFor(f => f.Fecha, new { @class = "small" })
            @if (Model != null && Model.Id > 0) //El campo fecha no se debe poder cambiar porque el código de pedido se calculó en base a la fecha seleccionada
            {
                @Html.HiddenFor(model => model.Fecha)
                <input type="text" class="form-control form-control-sm" value="@Model.Fecha" disabled />
            }
            else
            {
                @Html.EditorFor(f => f.Fecha, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            }
            @Html.ValidationMessageFor(f => f.Fecha, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(f => f.NombreOperario, new { @class = "small" })
            @if (Model == null || string.IsNullOrWhiteSpace(Model.CodigoOperario) || User.Claims.Any(c => c.Type.Equals(Consts.CLAIM_PERMISO_ADMINISTRACION)))
            {
                @Html.DropDownListFor(model => model.CodigoOperario, new SelectList(ViewBag.Operarios, "CODIGO", "NOMBRE", Model == null ? null : Model.CodigoOperario), "-Seleccionar-", new { @class = "form-control form-control-sm" })
            }
            else
            {
                @Html.HiddenFor(f => f.CodigoOperario)
                <input type="text" class="form-control form-control-sm" value="@Model.NombreOperario" disabled />
            }
            @Html.ValidationMessageFor(f => f.CodigoOperario, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-4"></div>
            <div class="col-md-2">
                <a asp-action="CrearProveedorFactura" asp-controller="Proveedor" asp-route-origen="@Model.Id-Pedido" class="btn btn-secondary btn-sm " method="get">Nuevo proveedor <i class="fas fa-plus ml-2"></i></a>
            </div>
        <div class="form-group col-md-10"></div>
        <div class="form-group col-md-6">
            @Html.LabelFor(f => f.NombreProveedor, new { @class = "small" })
            @Html.DropDownListFor(model => model.CodigoProveedor, new SelectList(ViewBag.Proveedores, "CODIGO", "DisplayName", Model == null ? null : Model.CodigoProveedor), "-Seleccionar-", new { @class = "form-control select2" })
            @Html.ValidationMessageFor(f => f.CodigoProveedor, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(f => f.CodigoEvento, new { @class = "small" })
            @Html.DropDownListFor(model => model.CodigoEvento, new SelectList(ViewBag.Eventos, "Codigo", "DisplayName", Model == null ? null : Model.CodigoEvento), "-Seleccionar-", new { @class = "form-control select2" })
            @Html.ValidationMessageFor(f => f.CodigoEvento, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(f => f.Observaciones, new { @class = "small" })
            @Html.EditorFor(f => f.Observaciones, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            @Html.ValidationMessageFor(f => f.Observaciones, "", new { @class = "text-danger small" })
        </div>
        @if (Model.Id > 0)
        {
                
            <div class="col-md-4 form-group">
                <input type="hidden" id="tablaID" name="tablaID" value="@Model.Id" />
                <div class="card">
                    <div class="card-body row justify-content-between align-items-center py-2">
                        <div class="col-md-12">
                            <h6 class="text-muted">Ficheros Pedido Compra </h6>
                        </div>
                        <div class="col-md-12 border-right align-self-start">
                            <span class="badge badge-danger">Documentos</span>
                            <table id="tablaDocumentos" class="table table-sm bg-white my-2">
                                @foreach (var doc in Model.documentos)
                                {
                                    <tr>
                                        <td>
                                            <a class="text-info" download="@doc.FicheroNombre" href="@Url.Content(doc.FicheroUrl)">@doc.FicheroNombre</a>
                                        </td>
                                        <td class="text-right">
                                            <a href="@Url.Action("BorrarDocumento","ComprasPedido", new { IdArchivo = doc.Id, IdTabla = Model.Id })" onclick="return confirm('¿Está seguro de querer borrar el documento?')">
                                                <i class="fas fa-times ml-2"></i>
                                            </a>
                                        </td>
                                    </tr>
                                }
                                </table>
                                <div class="form-group col-md-12">
                                    <label for="Fichero">Adjuntar otros ficheros</label>
                                    <input type="file" class="form-control form-control-sm" id="fileDocumentacion" name="fileDocumentacion" onchange="SubirDocumento()">
                                    <input type="hidden" id="hfFicheros" name="hfFicheros" />
                                    <br />
                                    <ul id="ulFicheros" class="small"></ul>
                                </div>
                            </div>
                        </div>
                    </div>
            </div>
        }
@*        <div class="form-group col-md-10">
            @Html.LabelFor(f => f.FicheroNombre, new { @class = "small" })
            @Html.EditorFor(f => fichero, "File")
            @Html.ValidationMessageFor(f => f.FicheroUrl, "", new { @class = "text-danger small" })
        </div>
*@    </div>
</div>
}
else
{
<div class="card mb-4 wow d-print-none">    
    <div class="form-row card-body">
        <div class="form-group col-md-12">
            @Html.DisplayFor(f => f.EstadoPedido)
        </div>
        <div class="form-group col-md-2">
            @Html.LabelFor(f => f.CodigoPedido, new { @class = "small" })
            @Html.HiddenFor(model => model.CodigoPedido)
            <input type="text" class="form-control form-control-sm" value="@Model.CodigoPedido" disabled />
            @Html.ValidationMessageFor(f => f.CodigoPedido, "", new { @class = "text-danger small" })
        </div>        

        <div class="form-group col-md-2">
            @Html.LabelFor(f => f.Fecha, new { @class = "small" })
            @if (Model != null && Model.Id > 0) //El campo fecha no se debe poder cambiar porque el código de pedido se calculó en base a la fecha seleccionada
            {
                @Html.HiddenFor(model => model.Fecha)
                <input type="text" class="form-control form-control-sm" value="@Model.Fecha" disabled />
            }
            else
            {
                @Html.EditorFor(f => f.Fecha, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            }
            @Html.ValidationMessageFor(f => f.Fecha, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-4">
            @Html.LabelFor(f => f.NombreOperario, new { @class = "small" })
            @if (Model == null || string.IsNullOrWhiteSpace(Model.CodigoOperario) || User.Claims.Any(c => c.Type.Equals(Consts.CLAIM_PERMISO_ADMINISTRACION)))
            {
                @Html.DropDownListFor(model => model.CodigoOperario, new SelectList(ViewBag.Operarios, "CODIGO", "NOMBRE", Model == null ? null : Model.CodigoOperario), "-Seleccionar-", new { @class = "form-control form-control-sm" })
            }
            else
            {
                @Html.HiddenFor(f => f.CodigoOperario)
                <input type="text" class="form-control form-control-sm" value="@Model.NombreOperario" disabled />
            }
            @Html.ValidationMessageFor(f => f.CodigoOperario, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-4"></div>
            <div class="col-md-2">
                <a asp-action="CrearProveedorFactura" asp-controller="Proveedor" asp-route-origen="@Model.Id-Pedido" class="btn btn-secondary btn-sm " method="get">Nuevo proveedor <i class="fas fa-plus ml-2"></i></a>
            </div>
        <div class="form-group col-md-10"></div>
        <div class="form-group col-md-6">
            @Html.LabelFor(f => f.NombreProveedor, new { @class = "small" })
            @Html.DropDownListFor(model => model.CodigoProveedor, new SelectList(ViewBag.Proveedores, "CODIGO", "DisplayName", Model == null ? null : Model.CodigoProveedor), "-Seleccionar-", new { @class = "form-control select2" })
            @Html.ValidationMessageFor(f => f.CodigoProveedor, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-6">
            @Html.LabelFor(f => f.CodigoEvento, new { @class = "small" })
            @Html.DropDownListFor(model => model.CodigoEvento, new SelectList(ViewBag.Eventos, "Codigo", "DisplayName", Model == null ? null : Model.CodigoEvento), "-Seleccionar-", new { @class = "form-control select2" })
            @Html.ValidationMessageFor(f => f.CodigoEvento, "", new { @class = "text-danger small" })
        </div>
        <div class="form-group col-md-12">
            @Html.LabelFor(f => f.Observaciones, new { @class = "small" })
            @Html.EditorFor(f => f.Observaciones, new { htmlAttributes = new { @class = "form-control form-control-sm" } })
            @Html.ValidationMessageFor(f => f.Observaciones, "", new { @class = "text-danger small" })
        </div>
@*        <div class="form-group col-md-10">
            @Html.LabelFor(f => f.FicheroNombre, new { @class = "small" })
            @Html.EditorFor(f => fichero, "File")
            @Html.ValidationMessageFor(f => f.FicheroUrl, "", new { @class = "text-danger small" })
        </div>*@
        @if (Model.Id > 0)
        {
            <div class="col-md-4 form-group">
                <input type="hidden" id="tablaID" name="tablaID" value="@Model.Id" />
                <div class="card">
                    <div class="card-body row justify-content-between align-items-center py-2">
                        <div class="col-md-12">
                            <h6 class="text-muted">Ficheros Pedido Compra </h6>
                        </div>
                        <div class="col-md-12 border-right align-self-start">
                            <span class="badge badge-danger">Documentos</span>
                            <table id="tablaDocumentos" class="table table-sm bg-white my-2">
                                @foreach (var doc in Model.documentos)
                                {
                                    <tr>
                                        <td>
                                            <a class="text-info" download="@doc.FicheroNombre" href="@Url.Content(doc.FicheroUrl)">@doc.FicheroNombre</a>
                                        </td>
                                        <td class="text-right">
                                            <a href="@Url.Action("BorrarDocumento","ComprasPedido", new { IdArchivo = doc.Id, IdTabla = Model.Id })" onclick="return confirm('¿Está seguro de querer borrar el documento?')">
                                                <i class="fas fa-times ml-2"></i>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </table>
                            <div class="form-group col-md-12">
                                <label for="Fichero">Adjuntar otros ficheros</label>
                                <input type="file" class="form-control form-control-sm" id="fileDocumentacion" name="fileDocumentacion" onchange="SubirDocumento()">
                                <input type="hidden" id="hfFicheros" name="hfFicheros" />
                                <br />
                                <ul id="ulFicheros" class="small"></ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
}
<partial name="_PedidoLineas" />